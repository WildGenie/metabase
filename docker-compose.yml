# Inspired by https://mherman.org/blog/dockerizing-a-react-app/
# TODO Have a separate `docker-compose`-file for production (see also https://docs.docker.com/compose/production/)

version: '3.7'

services:
  database:
    restart: always
    image: postgres:11.5-alpine
    environment:
      - POSTGRES_USER=postgres # ${TYPEORM_USERNAME}
      - POSTGRES_PASSWORD=postgres # ${TYPEORM_PASSWORD} # We can use docker-compose `secrets` for that
      - POSTGRES_DB=postgres # ${TYPEORM_DATABASE}postgres
    ports:
      - 5432:5432
    volumes:
      - data:/var/lib/postgresql/data

  # backend:
  #   restart: always
  #   build:
  #     context: ./backend
  #     dockerfile: ./Dockerfile-development
  #   command: npm run start:dev
  #   volumes:
  #     - ./backend:/app
  #     # - /app/node_modules # Keep the `node_modules` of the image
  #     - backend_node_modules:/app/node_modules
  #   ports:
  #     - 3001:3001
  #   environment:
  #     NODE_ENV: development
  #   depends_on:
  #     - database

  # nginx:
  #   restart: always
  #   image: nginx:1.17.3-alpine
  #   ports:
  #     - 80:80
  #     - 443:443
  #   volumes:
  #     - ./nginx/conf.d:/etc/nginx/conf.d
  #   depends_on:
  #     - java

  # java:
  #   restart: always
  #   build:
  #     context: ./java
  #     dockerfile: ./Dockerfile-development
  #   command: ...
  #   volumes:
  #     - ./java:/app
  #   ports:
  #     - 3002:3002
  #     - 5002:5002
  #   depends_on:
  #     - database

  backend:
    build:
      context: ./dotnet
      dockerfile: ./Dockerfile-development
    # user: 1000:1000
    volumes:
      - ./dotnet:/app
      # - /app/core # makes the engine create a volume for the specified path with the effect that the service does not write temporary files into the corresponding file on the file system that was bound by the preceding binding
      - /app/bin # makes the engine create a volume for the specified path with the effect that the service does not write temporary files into the corresponding directory on the file system that was bound by the preceding binding
      - /app/obj # makes the engine create a volume for the specified path with the effect that the service does not write temporary files into the corresponding directory on the file system that was bound by the preceding binding
    ports:
      - 5000:5000 # In production: 8000:80
      - 5001:5001 # In production: 8001:443
    environment:
      # TODO Do we really need these environment variables?
      - ASPNETCORE_URLS="https://+;http://+"
      - ASPNETCORE_HTTPS_PORT=5001
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_Kestrel__Certificates__Development__Password="crypticpassword"
    depends_on:
      - database

  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile-development
    volumes:
      - ./frontend:/app
      # - /app/node_modules # Keep the `node_modules` of the image
      - frontend_node_modules:/app/node_modules
    ports:
      - 3000:3000
    environment:
      NODE_ENV: development
    depends_on:
      - backend

volumes:
  data:
  frontend_node_modules:
  backend_node_modules:
