version: '3.3'

services:
  database:
    # https://hub.docker.com/_/postgres
    image: postgres:11.5-alpine
    # ports:
    #   - 5432:5432
    # For possible command-line arguments see
    # https://www.postgresql.org/docs/current/app-postgres.html
    # and for possible configuration parameters like `max_connections` see
    # https://www.postgresql.org/docs/current/runtime-config.html
    command: [
      "-c", "max_connections=100"
    ]
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - data:/var/lib/postgresql/data

  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
      args:
        - CERTIFICATE_AUTHORITY_BASE_FILE_NAME=${CERTIFICATE_AUTHORITY_BASE_FILE_NAME}
        - CERTIFICATE_AUTHORITY_PASSWORD=${CERTIFICATE_AUTHORITY_PASSWORD}
    # user: 1000:1000
    command: [
      "dotnet", "watch",
      "--project", "./src/Metabase.csproj",
      "--",
      "run",
      "--no-launch-profile",
      "--runtime", "linux-musl-x64"
      ]
      # "--no-restore",
      # ["dotnet", "watch", "run", "--no-restore"]
    volumes:
      - ./backend:/app
      # - backend_node_modules:/app/node_modules
      # The following items make the engine create anonymous volumes for the
      # specified path with the effect that the service does not write
      # temporary files into the corresponding directory on the host file
      # system that was bound by the `/app` binding.
      - /app/src/bin
      - /app/src/obj
      - /app/test/bin
      - /app/test/obj
      # Create anonymous volumes for dotnet tools
      - /home/me/.nuget
      - /home/me/.dotnet
    # ports:
    #   - 8080:8080
    environment:
      # https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-3.1#environment-variables
      # - XBASE_DATABASE__CONNECTION_STRING="Host=database;Port=5432;Database=xbase_development;User Id=postgres;Password=postgres;"
      - ASPNETCORE_URLS=http://0.0.0.0:8080
      - ASPNETCORE_ENVIRONMENT=development
      - XBASE_Host=https://${HOST}:${HTTPS_PORT}
      - XBASE_JsonWebToken__EncryptionKey=${JSON_WEB_TOKEN_ENCRYPTION_KEY}
      - XBASE_JsonWebToken__SigningKey=${JSON_WEB_TOKEN_SIGNING_KEY}
      - XBASE_TestlabSolarFacadesOpenIdConnectClientSecret=${TESTLAB_SOLAR_FACADES_OPEN_ID_CONNECT_CLIENT_SECRET}
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      # https://docs.microsoft.com/en-us/aspnet/core/security/docker-compose-https#starting-a-container-with-https-support-using-docker-compose
      # - ASPNETCORE_Kestrel__Certificates__Default__Password=${SSL_CERTIFICATE_PASSWORD}
      # - ASPNETCORE_Kestrel__Certificates__Default__Path=/app/ssl/${SSL_CERTIFICATE_BASE_FILE_NAME}.pfx
    extra_hosts:
      - ${HOST}:${DOCKER_IP}
      # - ${ISE_HOST}:${DOCKER_IP}
      # - ${LBNL_HOST}:${DOCKER_IP}
    depends_on:
      - database

  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
      args:
        - CERTIFICATE_AUTHORITY_BASE_FILE_NAME=${CERTIFICATE_AUTHORITY_BASE_FILE_NAME}
    # user: 1000:1000
    # ports:
    #   - 8081:8080
    command: [
      "yarn", "dev"
      ]
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    extra_hosts:
      - ${HOST}:${DOCKER_IP}
    environment:
      - NODE_ENV=development
    depends_on:
      - backend

  nginx: # https://hub.docker.com/_/nginx
    image: nginx:1.19.4-alpine
    command: [
      "nginx-debug",
      "-g", "daemon off;"
      ] # run in debug mode
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/templates/development:/etc/nginx/templates:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # - /etc/nginx/conf.d # run in read-only mode ...
      # - /var/cache/nginx # ...
      # - /var/run # ...
    ports:
      - ${HTTP_PORT}:80
      - ${HTTPS_PORT}:443
    environment:
      - SERVER_NAME=${HOST}
      - SSL_CERTIFICATE_BASE_FILE_NAME=${SSL_CERTIFICATE_BASE_FILE_NAME}
    depends_on:
      - frontend
      - backend

volumes:
  data:
  # backend_node_modules:
  frontend_node_modules:
