# Inspired by https://github.com/dotnet/dotnet-docker/tree/master/samples/aspnetapp
FROM mcr.microsoft.com/dotnet/core/sdk:3.0-alpine

ARG GROUP_ID=1000
ARG USER_ID=1000

# Create non-root user to run commands in (see https://medium.com/@mccode/processes-in-containers-should-not-run-as-root-2feae3f0df3b)
RUN addgroup -S -g ${GROUP_ID} us && \
    adduser -S -D -u ${USER_ID} -G us me

#############
# As `root` #
#############

RUN \
  apk add --no-cache \
    dumb-init \
    make \
    npm

ENV HOME=/home/me
RUN \
  mkdir ${HOME}/app && \
  chown me:us ${HOME}/app && \
  ln -s ${HOME}/app /app

###########
# As `me` #
###########
USER me
WORKDIR /app

# For a comprehensive list of tools see https://github.com/natemcmaster/dotnet-tools
# Diagnostics is provided by `counters`, `dump`, and `trace`, see https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/
# Code formatting is provided by `format`
# Code generation is provided by `aspnet-codegenerator`
# Database migrations are provided by `ef`
# Read-Evaluate-Print-Loop (REPL) is provided by `script`, see https://github.com/filipw/dotnet-script#repl
ENV PATH=$PATH:/home/me/.dotnet/tools
RUN \
  dotnet tool install --global dotnet-aspnet-codegenerator && \
  dotnet tool install --global dotnet-counters && \
  dotnet tool install --global dotnet-dump && \
  dotnet tool install --global dotnet-ef && \
  dotnet tool install --global dotnet-format && \
  dotnet tool install --global dotnet-script && \
  dotnet tool install --global dotnet-trace

RUN mkdir -p ./src && \
    mkdir -p ./test
COPY \
  --chown=me:us \
  src/Icon.csproj ./src/
COPY \
  --chown=me:us \
  test/Test.csproj ./test/

# TODO Is this really what we want? It is inspired by
# https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https-development.md#linux
# https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-2.2&tabs=linux
RUN \
  dotnet dev-certs https --export-path .secrets/https/icon.pfx --password crypticpassword && \
  dotnet user-secrets --project ./src/Icon.csproj set "Kestrel:Certificates:Development:Password" "crypticpassword" && \
  dotnet user-secrets --project ./src/Icon.csproj set SendGridUser myuser && \
  dotnet user-secrets --project ./src/Icon.csproj set SendGridKey mykey

COPY \
  --chown=me:us \
  app.sln ./
RUN \
  dotnet clean && \
  dotnet restore

COPY \
  --chown=me:us \
  package.json package-lock.json ./
RUN npm install

# Create empty directories `/app/*/bin` and `/app/*/obj` for user `me` and group
# `us` to make the respective mounted volumes be owned by the user `me` and the
# group `us`.
RUN \
  mkdir -p ./src/bin && \
  mkdir -p ./src/obj && \
  mkdir -p ./test/bin && \
  mkdir -p ./test/obj

EXPOSE 5000
EXPOSE 5001
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
# Inspired by https://stackoverflow.com/questions/51188774/docker-dotnet-watch-run-error-unable-to-bind-to-https-localhost5000-on-the-i/51256147#51256147
# CMD ["dotnet", "watch", "run", "--no-restore", "--urls", "https://0.0.0.0:5001;http://0.0.0.0:5000"]
# CMD ["dotnet", "watch", "run", "--urls", "https://0.0.0.0:5001;http://0.0.0.0:5000"]
CMD ["dotnet", "run", "--project", "./src/Icon.csproj" ,"--urls", "https://0.0.0.0:5001;http://0.0.0.0:5000"]
