# Inspired by https://github.com/dotnet/dotnet-docker/tree/master/samples/aspnetapp
# See https://hub.docker.com/_/microsoft-dotnet-core-sdk
FROM mcr.microsoft.com/dotnet/core/sdk:3.1.301-alpine3.12

ARG GROUP_ID
ARG USER_ID
ARG CERTIFICATE_AUTHORITY_BASE_FILE_NAME

# Create non-root user to run commands in (see https://medium.com/@mccode/processes-in-containers-should-not-run-as-root-2feae3f0df3b)
RUN \
  addgroup -S -g ${GROUP_ID} us && \
  adduser -S -D -u ${USER_ID} -G us me

#############
# As `root` #
#############

# `lldb` is needed by dotnet tool `dotnet-sos`, see
# https://github.com/dotnet/diagnostics#net-core-diagnostics-repo
# `openssl` is needed to debug SSL certificates
#
# Tracing cannot only be done with `dotnet-trace`, which is connected to
# `dotnet-sos`, but also with LTTng, see
# https://docs.microsoft.com/en-us/dotnet/core/diagnostics/logging-tracing#logging-events
# and
# https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/linux-performance-tracing.md#collecting-a-trace
# and
# https://stackoverflow.com/questions/55477684/how-to-configure-network-tracing-dotnet-core-for-httpclient-calls/58700657#58700657
# and
# https://lttng.org/docs/#doc-tracing-your-own-user-application
RUN \
  apk add --no-cache \
    curl \
    dumb-init \
    lldb \
    make \
    npm \
    openssl

# Add dependencies for interactive examples in ./examples
# `jq` can be used to format and filter JSON data
RUN \
  apk add --no-cache \
    bash \
    jq \
    neovim

# Inspired by https://stackoverflow.com/questions/55485511/how-to-run-dotnet-dev-certs-https-trust/59702094#59702094
# See also https://github.com/dotnet/aspnetcore/issues/7246#issuecomment-541201757
# and https://github.com/dotnet/runtime/issues/31237#issuecomment-544929504
COPY \
  ./ssl/${CERTIFICATE_AUTHORITY_BASE_FILE_NAME}.crt \
  /usr/local/share/ca-certificates
RUN \
  update-ca-certificates

ENV HOME=/home/me
RUN \
  mkdir ${HOME}/app && \
  chown me:us ${HOME}/app && \
  ln -s ${HOME}/app /app

###########
# As `me` #
###########
USER me
WORKDIR /app

# Install the tools specified in the manifest file `dotnet-tools.json`.
# For a comprehensive list of tools see https://github.com/natemcmaster/dotnet-tools
# Diagnostics is provided by `counters`, `dump`, and `trace`, see https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/
# Code formatting is provided by `format`
# Code generation is provided by `aspnet-codegenerator`
# Database migrations are provided by `ef`
# Read-Evaluate-Print-Loop (REPL) is provided by `script`, see https://github.com/filipw/dotnet-script#repl
# Information on the `dotnet tool` command-line interface can be found under
# * https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-tool-install
# * https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools#install-a-local-tool
COPY \
  --chown=me:us \
  ./dotnet-tools.json ./
RUN \
  dotnet tool restore \
    --tool-manifest ./dotnet-tools.json

RUN \
  mkdir -p ./src && \
  mkdir -p ./test
COPY \
  --chown=me:us \
  ./src/Icon.csproj ./src/
COPY \
  --chown=me:us \
  ./test/Test.csproj ./test/

# TODO Is this really what we want? It is inspired by
# https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/Dockerfile.alpine-x64
# https://github.com/dotnet/dotnet-docker/blob/master/samples/run-aspnetcore-https-development.md
# https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-2.2&tabs=linux
#
# https://github.com/dotnet/aspnetcore/issues/7246#issuecomment-541138051
# sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt -config localhost.conf -passin pass:crypticpassword
# sudo openssl pkcs12 -export -out localhost.pfx -inkey localhost.key -in localhost.crt
#
# https://github.com/dotnet/aspnetcore/issues/7246#issuecomment-541201757
RUN \
  # dotnet dev-certs https --export-path ./.secrets/https/icon.pfx --password crypticpassword && \
  # dotnet user-secrets --project ./src/Icon.csproj set "Kestrel:Certificates:Development:Password" "crypticpassword" && \
  dotnet user-secrets --project ./src/Icon.csproj set SendGridUser myuser && \
  dotnet user-secrets --project ./src/Icon.csproj set SendGridKey mykey

COPY \
  --chown=me:us \
  ./app.sln ./
RUN \
  dotnet clean && \
  dotnet restore --runtime linux-musl-x64 && \
  dotnet tool run dotnet-sos install # https://github.com/dotnet/diagnostics/blob/master/documentation/installing-sos-instructions.md

COPY \
  --chown=me:us \
  ./package.json ./package-lock.json ./
RUN npm install

# Create empty directories `/app/*/bin` and `/app/*/obj` for user `me` and group
# `us` to make the respective mounted volumes be owned by the user `me` and the
# group `us`.
RUN \
  mkdir -p ./src/bin && \
  mkdir -p ./src/obj && \
  mkdir -p ./test/bin && \
  mkdir -p ./test/obj

ENTRYPOINT ["/usr/bin/dumb-init", "--"]
