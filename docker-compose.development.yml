# Inspired by https://mherman.org/blog/dockerizing-a-react-app/

version: '3.3'

services:
  database:
    image: postgres:11.5-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - data:/var/lib/postgresql/data

  backend:
    build:
      context: .
      dockerfile: ./Dockerfile-backend-${ENVIRONMENT}
      args:
        - CERTIFICATE_AUTHORITY_BASE_FILE_NAME=${CERTIFICATE_AUTHORITY_BASE_FILE_NAME}
        - CERTIFICATE_AUTHORITY_PASSWORD=${CERTIFICATE_AUTHORITY_PASSWORD}
    # user: 1000:1000
    volumes:
      - .:/app
      # - node_modules:/app/node_modules
      # The following items make the engine create a volume for the specified
      # path with the effect that the service does not write temporary files
      # into the corresponding directory on the host file system that was bound
      # by the `/app` binding.
      - /app/Infrastructure/backend/src/bin
      - /app/Infrastructure/backend/src/obj
      - /app/Infrastructure/backend/test/bin
      - /app/Infrastructure/backend/test/obj
      # Create anonymous volumes for dotnet tools
      - /home/me/.nuget
      - /home/me/.dotnet
    environment:
      # https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-3.1#environment-variables
      # - XBASE_DATABASE__CONNECTION_STRING="Host=database;Port=5432;Database=xbase_development;User Id=postgres;Password=postgres;"
      - ASPNETCORE_URLS=http://0.0.0.0:8080
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
    extra_hosts:
      - ${METABASE_HOST}:${DOCKER_IP}
      - ${ISE_HOST}:${DOCKER_IP}
      - ${LBNL_HOST}:${DOCKER_IP}
    depends_on:
      - database

  frontend:
    build:
      context: .
      dockerfile: ./Dockerfile-frontend-${ENVIRONMENT}
    # user: 1000:1000
    command: [
      "npm", "run", "start"
      ]
    volumes:
      - .:/app
    environment:
      - NODE_ENV=${ENVIRONMENT}
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend

  nginx: # https://hub.docker.com/_/nginx
    image: nginx:1.19.4-alpine
    command: [
      "nginx-debug",
      "-g", "daemon off;"
      ] # run in debug mode
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/templates/${ENVIRONMENT}:/etc/nginx/templates:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # - /etc/nginx/conf.d # run in read-only mode ...
      # - /var/cache/nginx # ...
      # - /var/run # ...
    depends_on:
      - frontend
      - backend

volumes:
  data:
  # node_modules:
  frontend_node_modules:
