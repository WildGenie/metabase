- hosts: localhost
  connection: local

  pre_tasks:
    - name: Update package information
      become: yes
      apt:
        update_cache: yes
      changed_when: false
    - name: Install access control list utilities (needed to escalate privileges, see https://github.com/ansible/ansible/issues/16052)
      become: yes
      package:
        name: acl
        state: present

  tasks:
    - name: Bash completion
      block:
        - name: Install Bash completion
          become: yes
          package:
            name: bash-completion
            state: present

        # Inspired by https://stackoverflow.com/questions/40316836/update-bashrc-with-virtualenv-info-using-ansible/40317125#40317125
        # The comment also mentions an alternative better solution that uses a `~/.bashrc.d` directory.
        - name: Source Bash completion scripts in `~/.bashrc`
          blockinfile:
            dest: "{{ ansible_env.HOME }}/.bashrc"
            block: |
              for file in /etc/bash_completion.d/* ; do
                  source "$file"
              done
            marker: '# {mark} ANSIBLE MANAGED BLOCK - bash-completion'
            insertbefore: BOF
            create: yes

    - name: Install GNU Make
      become: yes
      package:
        name: make
        state: present

    - name: Hard disk management
      block:
      - name: Install Small Computer System Interface (SCSI) tools (for example to scan for additional disks by running `sudo rescan-scsi-bus.sh` without restarting the virtual machine)
        become: yes
        package:
          name: scsitools
          state: present

      # See https://opensource.com/article/18/11/partition-format-drive-linux
      - name: Install parted to partition hard disks (for example by running `sudo parted --align=opt /dev/sdx mklabel gpt` and `sudo parted --align=opt /dev/sdx mkpart primary 2048s 50G` and then format the disk by running `sudo mkfs.ext4 -L data /dev/sdx1` and mount it temporarily by running `mkdir ~/data` and `sudo mount /dev/sdx1 ~/data` and permanently by adding `UUID=XXXX-XXXX-XXXX-XXXX-XXXX /home/cloud/data ext4 errors=remount-ro 0 1` to `/etc/fstab` and running `sudo mount --all` where the UUID is the one reported by `sudo blkid | grep /dev/sdx1` and to list block devices and whether and where they are mounted run `lsblk`)
        become: yes
        package:
          name: parted
          state: present

    - name: Docker and `docker-compose`
      become: yes
      block:
        - name: Add Docker dependencies
          package:
            name:
              - apt-transport-https
              - ca-certificates
              - curl
              - gnupg
              - lsb-release
            state: present

        - name: Add Docker key
          apt_key:
            url: https://download.docker.com/linux/debian/gpg
            id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
            state: present

        - name: Docker Community Edition
          block:
            - name: Add Docker repository
              apt_repository:
                repo: deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable
                state: present
            - name: Install Docker
              package:
                name:
                  - docker-ce
                  - docker-ce-cli
                  - containerd.io
                state: present

        - name: Install `docker-compose`
          get_url:
            url: https://github.com/docker/compose/releases/download/1.29.0/docker-compose-{{ ansible_system }}-{{ ansible_userspace_architecture }}
            dest: /usr/local/bin/docker-compose
            mode: 'u+x,g+x,o+x'
            # checksum: sha256:TODO https://github.com/docker/compose/releases/tag/1.29.0
